<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
    <style type="text/css">
      html { height: 100% }
      body { height: 100%; margin: 0; padding: 0 }
      #map-canvas { height: 100% }
    </style>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAd7lDXsyY13jO9zRM5AiLWCbhqbrf5XCY"></script>
    <script type="text/javascript">
    var southampton = new google.maps.LatLng(50.924354,-1.405391);
	var map;
	var M;
	var jams = [];
	var cars = [];
	var radius = [];
	var fakeJamCount = 0;
	var timeGone;
	var timeLeft;
	var timer;
	var score;
	var ID;
	var round;
	var allAssigned;
	var homeControlDiv;
	var homeControlDiv2;
	var homeControlDiv3;
	var jamJSON;
	var carJSON;
	var MSelect;
	var directionsService = new google.maps.DirectionsService();
	var reals = [[new google.maps.LatLng(50.8967964,-1.4069385),
				new google.maps.LatLng(50.8985614,-1.3926258),
				new google.maps.LatLng(50.9149906,-1.4145485),
				new google.maps.LatLng(50.9218287,-1.4686275),
				new google.maps.LatLng(50.9317153,-1.4475859),
				new google.maps.LatLng(50.9346772,-1.4352648),
				new google.maps.LatLng(50.9338139,-1.4182561),
				new google.maps.LatLng(50.9358996,-1.4067571),
				new google.maps.LatLng(50.9409782,-1.4067499),
				new google.maps.LatLng(50.9361462,-1.3775493),
				new google.maps.LatLng(50.9253711,-1.3841219),
				new google.maps.LatLng(50.9176422,-1.3834981),
				new google.maps.LatLng(50.9352312,-1.3522463),
				new google.maps.LatLng(50.9150376,-1.3611758),
				new google.maps.LatLng(50.8966838,-1.369583)],
				[new google.maps.LatLng(50.8967964,-1.4069385),
				new google.maps.LatLng(50.8985614,-1.3926258),
				new google.maps.LatLng(50.9149906,-1.4145485),
				new google.maps.LatLng(50.9317153,-1.4475859),
				new google.maps.LatLng(50.9338139,-1.4182561),
				new google.maps.LatLng(50.9358996,-1.4067571),
				new google.maps.LatLng(50.9361462,-1.3775493),
				new google.maps.LatLng(50.9253711,-1.3841219),
				new google.maps.LatLng(50.9150376,-1.3611758)],
				[new google.maps.LatLng(50.8985614,-1.3926258),
				new google.maps.LatLng(50.9149906,-1.4145485),
				new google.maps.LatLng(50.9338139,-1.4182561),
				new google.maps.LatLng(50.9361462,-1.3775493),
				new google.maps.LatLng(50.9346772,-1.4352648)],
				[new google.maps.LatLng(50.8985614,-1.3926258),
				new google.maps.LatLng(50.9149906,-1.4145485),
				new google.maps.LatLng(50.9338139,-1.4182561)],
				[]];
	
	//run on load
	function initialize(){
		//set up map
		var initMap = {
			center: southampton,
			zoom:13,
			disableDefaultUI:true,
			mapTypeId: google.maps.MapTypeId.ROADMAP
		};
		map = new google.maps.Map(document.getElementById("map-canvas"),initMap);
		map.setClickableIcons(false);
		new google.maps.Rectangle({
			fillOpacity: 1.0,
			map: map,
			bounds: {
				north: 90,
				south: 50.9603811,
				east: 180,
				west: -180
			}
		});
		new google.maps.Rectangle({
			fillOpacity: 1.0,
			map: map,
			bounds: {
				north: 50.8883491,
				south: -90,
				east: 180,
				west: -180
			}
		});
		new google.maps.Rectangle({
			fillOpacity: 1.0,
			map: map,
			bounds: {
				north: 90,
				south: -90,
				east: 180,
				west: -1.3106925
			}
		});
		new google.maps.Rectangle({
			fillOpacity: 1.0,
			map: map,
			bounds: {
				north: 90,
				south: -90,
				east: -1.4981467,
				west: -180
			}
		});
		//create instruction window
		HomeControl();
		//add instruction window to the center of the map
		map.controls[google.maps.ControlPosition.CENTER].push(homeControlDiv);
		//create Go Button
		HomeControl2();
		HomeControl3();

	}
	
	function makeid(){
		var text = "";
		var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
		for( var i=0; i < 10; i++ ){
			text += possible.charAt(Math.floor(Math.random() * possible.length));
		}
		return text;
	}
	
	//start text
	function HomeControl() {
		homeControlDiv = document.createElement('div');
		homeControlDiv.style.padding = '50px';
		var controlUI = document.createElement('div');
		controlUI.style.backgroundColor = 'white';
		controlUI.style.border='1px solid';
		controlUI.style.paddingLeft = '5px';
		controlUI.style.paddingRight = '5px';
		controlUI.style.paddingTop = '5px';
		controlUI.style.paddingBottom = '5px';
		controlUI.style.textAlign = 'center';
		homeControlDiv.appendChild(controlUI);
		var coText = document.createElement('div');
		coText.style.fontFamily='Arial,sans-serif';
		coText.style.fontSize='18px';
		coText.innerHTML = 'Number of police cars and fake traffic jams:  ';
		var image = document.createElement('img');
		image.src = './description.png';
		MSelect = document.createElement('select');
		MSelect.innerHTML = '<option value=1>1</option><option value=2>2</option><option value=3>3</option><option value=4>4</option><option value=5>5</option>';
		var controlText = document.createElement('button');
		controlText.style.fontFamily='Arial,sans-serif';
		controlText.style.cursor = 'pointer';
		controlText.style.marginRight = '10px';
		controlText.style.marginBottom = '20px';
		controlText.innerHTML = 'Play';
		var leaderText = document.createElement('button');
		leaderText.style.fontFamily='Arial,sans-serif';
		leaderText.style.cursor = 'pointer';
		leaderText.innerHTML = 'Leader Board';
		leaderText.style.marginBottom = '20px';
		controlUI.appendChild(image);
		var brk = document.createElement('div');
		brk.innerHTML = '<br>';
		coText.appendChild(MSelect);
		controlUI.appendChild(coText);
		controlUI.appendChild(brk);
		controlUI.appendChild(controlText);
		controlUI.appendChild(leaderText);

		//when the text is clicked start the first round and remove the information window
		google.maps.event.addDomListener(controlText, 'click', function() {
		//add the Go button to the map again
		map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(homeControlDiv2);
		map.controls[google.maps.ControlPosition.TOP_CENTER].push(homeControlDiv3);
			M = MSelect.options[MSelect.selectedIndex].value;
			resetVariables();
			startRound(round);
			map.controls[google.maps.ControlPosition.CENTER].pop();
		});
		
		//when the text is clicked start the first round and remove the information window
		google.maps.event.addDomListener(leaderText, 'click', function() {
			window.location = "https://smart-traffic-control-game.herokuapp.com/leaderboard";
		});
	}
	
	function HomeControl2() {
	homeControlDiv2 = document.createElement('div');
	  var controlUI = document.createElement('div');
	  controlUI.style.padding = '10px';
	  controlUI.style.width = '100px';
	  controlUI.style.backgroundColor = 'white';
	  controlUI.style.border='1px solid';
	  controlUI.style.cursor = 'pointer';
	  controlUI.style.textAlign = 'center';
	  homeControlDiv2.appendChild(controlUI);
	  controlUI.appendChild(document.createElement('div'));
	}
	
	function HomeControl3() {
	homeControlDiv3 = document.createElement('div');
	  var controlUI = document.createElement('div');
	  controlUI.style.padding = '10px';
	  controlUI.style.width = '100px';
	  controlUI.style.backgroundColor = 'white';
	  controlUI.style.border='1px solid';
	  controlUI.style.textAlign = 'center';
	  controlUI.style.innerHTML = '<b>Score: 0</b>';
	  homeControlDiv3.appendChild(controlUI);
	  controlUI.appendChild(document.createElement('div'));
	}
	
	function sendAndReset(person){
		$.ajax({
			type: 'POST',
			url: 'https://smart-traffic-control-game.herokuapp.com/',
			data: 'game='+ID+'&M='+M+'&name='+person+'&score='+ score +'&round='+round + '&jams=' +jamJSON.substr(0,jamJSON.length-1) + '&cars=' + carJSON.substr(0,carJSON.length-1)
		});
		prompt("Please copy the code below to complete the HIT", ID);
		//clear the map
		deleteJams();
		deleteCars();
		map.controls[google.maps.ControlPosition.BOTTOM_CENTER].pop();
		map.controls[google.maps.ControlPosition.CENTER].push(homeControlDiv);
	}
	
	function resetVariables(){
		ID = makeid();
		jamJSON = "";
		carJSON = "";
		round = 0;
		score = 0;
	}
	
	//takes a number representing the round of the current game [0-4]
	function startRound(round){
		if(round === 5){
			score = Math.round(score);
			var person;
			do{
				person = prompt("Congratulations! You beat the game! Your score is " + score + ". Please enter your name to add it to the leader board.", "");
			}
			while(person === null || person === "");
			sendAndReset(person);
		}
		homeControlDiv2.firstChild.innerHTML = '<b>Go</b>';
		google.maps.event.addDomListener(homeControlDiv2.firstChild, 'click', function() {
		if(fakeJamCount<M){
			//alert the user if not enough jams have been added
			alert("Please select " + M + " place(s) for a traffic jam to occur. (" + fakeJamCount + " already selected)");
		}else{
			var fine = true;
			for(var p = 0; p<jams.length; p++){
				if(jams[p].getCenter().lat() < 50.8883491 || jams[p].getCenter().lat() > 50.9603811 || jams[p].getCenter().lng() > -1.3106925 || jams[p].getCenter().lng() < -1.4981467){
					fine = false;
				}
			}
			if(fine === false){
				deleteJams();
				for(var i = 0; i<reals[round].length; i++){
					placeRealJam(reals[round][i]);
				}
			}else{
				if(cars.length<M){
					var temp = M;
					M = M - cars.length;
					placeCarsRandomly();
					M = temp;
					alert("Please wait for " + M + " police cars to be placed on the map.");
				}else{
				//start the timer and allow the cars to move
				startCountdown();			
				}
			}
		}
	  });
		//clear the map
		deleteJams();
		deleteCars();
		//place all real traffic jams
		for(var i = 0; i<reals[round].length; i++){
			placeRealJam(reals[round][i]);
		}
		placeCarsRandomly();
		//enable a click anywhere on the map to add a fake jam
		google.maps.event.addListener(map, 'click', function(event) {
			placeCircle(event.latLng);
		});
	}
	
	//takes a Car (extended google.maps.Marker object) and moves it forward on its path to its target
	function advance(car){
		//if taking time to assign then increment this value
		if(car.assignTime < 10){
			car.assignTime++;
		}else{
			//check if target has been checked
			if(car.target.checked === true){
				//assign the car a new target
				assign(car, 0);
			}else{
				//increment the car along its path depending on its proximity to a real traffic jam
				if(distanceToNearestRealJam(car.position) < 0.8){
					if(car.wait === 0){
						car.pointOnPath++;
						car.wait = 5;
					}else{
						car.wait--;
					}
				}else{
					car.pointOnPath++;		
				}
				//move the car to this new point if this isn't past its target and check if the current location is a jam and if so check it
				if(car.pointOnPath<car.path.length){
					moveCar(car, car.path[car.pointOnPath]);
					checkCurrentLocation(car);
				}else{
					checkCircle(car);
				}
			}
		}
	}
	
	function checkCircle(car){
		car.target.setOptions({
		//change colour to green
			strokeColor:"#00FF00",
			fillColor:"#00FF00"
		});
		//set checked value
		car.target.checked = true;
		if(car.target.real === false){
			car.fakeJamsChecked++;
		}
		car.jamsChecked++;
	}
	
	//takes a car object (extended google.maps.Marker) and allocates it a new target traffic jam
	function assign(car, aT){
		//resets the time taken to assign a new traffic jam
		car.assignTime = aT;
		var closest;
		var closestDistance = Infinity;
		//loops through all traffic jams looking for the closest that hasn't already been checked
		for(var o = 0; o<jams.length; o++){
			if(jams[o].checked === false && jams[o].assigned === allAssigned){
				var dist = Math.sqrt(Math.pow(car.position.lat()-jams[o].getCenter().lat(), 2)+Math.pow(car.position.lng()-jams[o].getCenter().lng(), 2));
				if(dist < closestDistance){
					closest = jams[o];
					closestDistance = dist;
				}
			}
		}
		//check that the closest traffic jam actually exists and set it as the cars target
		if(closest !== undefined){
			if(car.target !== undefined){
				car.target.assigned = false;			
			}
			car.target = closest;
			directionsService.route({
					origin:car.getPosition(),
					destination:car.target.getCenter(),
					travelMode: google.maps.TravelMode.DRIVING
				}, function(result, status) {
					if (status == google.maps.DirectionsStatus.OK) {
						car.path = result.routes[0].overview_path;
						car.pointOnPath = 0;
						car.wait = 0;
						car.target.assigned = true;
					}
				}
			);
		}
	}
	
	function checkIfLost(){
		//loop around all the traffic jams checking that all the fake ones have been checked or not
		for (var i = 0; i<jams.length; i++) {
			if (jams[i].real === false && jams[i].checked === false) {
				return false;
			}
		}
		return true;
	}
	
	function calculateScore(){
		for(var a = 0; a<jams.length; a++){
			if(jams[a].real === false){
				if(distanceToNearestRealJam(jams[a].center) < 0.8){
					score += jams[a].influence * distanceToNearestRealJam(jams[a].center);
				}else{
					score += jams[a].influence;
				}
			}
		}
	}
	
	function calculateScore2(){
		for(var a = 0; a<jams.length; a++){
			if(jams[a].real === false && jams[a].checked === false){
				if(distanceToNearestRealJam(jams[a].center) < 0.8){
					score += distanceToNearestRealJam(jams[a].center);
				}else{
					score += 1;
				}
			}
		}
	}
	
	function endRound(){
		clearInterval(timer);
		//calculateScore();
		for(var b = 0; b<jams.length; b++){
			if(jams[b].real === false){
				if(round === 4){
					jamJSON = jamJSON + '{"game":"'+ID+'","round":'+round+',"lat":' + jams[b].getCenter().lat() + ',"lng":' + jams[b].getCenter().lng() + ',"influence":' + jams[b].influence + ',"distancetoreal":-1},'
				}else{
					jamJSON = jamJSON + '{"game":"'+ID+'","round":'+round+',"lat":' + jams[b].getCenter().lat() + ',"lng":' + jams[b].getCenter().lng() + ',"influence":' + jams[b].influence + ',"distancetoreal":' + distanceToNearestRealJam(jams[b].getCenter()) + '},'
				}
			}
		}
		for(var c = 0; c<cars.length; c++){
			carJSON = carJSON + '{"game":"'+ID+'","round":'+round+',"lat":' + cars[c].startPosition.lat() + ',"lng":' + cars[c].startPosition.lng() + ',"jamschecked":' + cars[c].jamsChecked + ',"fakechecked":' + cars[c].fakeJamsChecked + '},'
		}
	}
	
	function startCountdown(){
		//set time (must be greater than assignTime * 10)
		endTime = 300;
		allAssigned = false;
		//assign each car to a target
		for(var p = 0; p<M; p++){
			assign(cars[p], 0);
		}
		timeGone = 0;
		timer = setInterval(function(){
		homeControlDiv2.firstChild.innerHTML = '<b>' + Math.round((endTime - timeGone)/10) + ' seconds left.</b>';
		calculateScore2();
		homeControlDiv3.firstChild.innerHTML = '<b>Score: ' + Math.round(score) + '</b>';
		google.maps.event.clearListeners(homeControlDiv2.firstChild, 'click');
			//check if the game has ended due to a loss
			if(checkIfLost() === true){
				endRound();
				//round ends with a lose and resets to the first level
				score = Math.round(score);
				var person;
				do{
					person = prompt("Unlucky! Your score is " + score + ". Please enter your name to add it to the leader board.", "");
				}
				while(person === null || person === "");
				sendAndReset(person);
			//check if the timer has run out
			}else if(endTime - timeGone <= 0){
				endRound();
				//round ends with a win and continues to the next level
				alert("Win!");
				round++;
				startRound(round);
			}
			//advance all cars along their path
			for(var f = 0; f<cars.length;f++){
				advance(cars[f]);
			}
			var assignedList = 0;
			for(var s = 0; s<jams.length; s++){
				if(jams[s].real === false && jams[s].checked === false){
					jams[s].influence++;
				}
				if(jams[s].assigned === true || jams[s].checked === true){
					assignedList++;
				}
			}
			timeGone++;
			if(assignedList === jams.length){
				allAssigned = true;
			}
		}, 100);
		//remove the ability to add more fake traffic jams
		google.maps.event.clearListeners(map, 'click');
		disableDrag();
	}

	
	function placeCircle(location) {
		if(fakeJamCount < M){
			var circle = new google.maps.Circle({
				center:location,
				draggable:true,
				radius:100,
				strokeColor:"#FF0000",
				strokeOpacity:0.8,
				strokeWeight:2,
				fillColor:"#FF0000",
				fillOpacity:0.4,
				map: map
			});
			fakeJamCount++;
			circle.real = false;
			circle.checked = false;
			circle.assigned = false;
			circle.influence = 0;
			jams.push(circle);
		}
	}
	
	//takes a google.maps.LatLng object and verifies if a traffic jam is present at it, if there is one it becomes green
	function checkCurrentLocation(car){
		var location = car.path[car.pointOnPath];
		for (var i = 0; i < jams.length; i++) {
			if(Math.round(jams[i].getCenter().lat() * 1000) === Math.round(location.lat() * 1000) && Math.round(jams[i].getCenter().lng() * 1000) === Math.round(location.lng() * 1000) && jams[i].checked === false){
				checkCircle(car);
			}
        }
	}
	
	function clearJams(){
		for (var i = 0; i < jams.length; i++) {
          jams[i].setMap(null);
        }
	}
	
	function deleteJams(){
		clearJams();
		fakeJamCount = 0;
		jams = [];
	}
	
	function disableDrag(){
		for(var i = 0; i<jams.length;i++){
			jams[i].setOptions({draggable: false});
		}
	}
		
	function placeCar(position){
		var car = new google.maps.Marker({
			position: position,
			icon: './caricon.png',
			clickable: false,
			map: map
		});
		car.path = [];
		car.assignTime = 0;
		car.fakeJamsChecked = 0;
		car.jamsChecked = 0;
		car.startPosition = car.position;
		cars.push(car);
	}
	
	function moveCar(car, position){
		car.setPosition(position);
	}
	
	function clearCars(){
		for (var i = 0; i < cars.length; i++) {
          cars[i].setMap(null);
        }
	}
	
	function deleteCars(){
		clearCars();
		cars = [];
	}
	
	function placeRealJam(location){
		var circle = new google.maps.Circle({
			center:location,
			draggable:false,
			radius:100,
			strokeColor:"#000000",
			strokeOpacity:0.8,
			strokeWeight:2,
			fillColor:"#000000",
			fillOpacity:0.4,
			map: map
		});
		circle.real = true;
		circle.checked = false;
		circle.assigned = false;
		google.maps.event.addListener(circle, 'mouseover', function() {placeRadius(circle.center, 5);});
		jams.push(circle);
	}
	
	function placeRadius(location, numberOfRings){
		for(var i = numberOfRings;i>0;i--){
			var circle = new google.maps.Circle({
				center:location,
				draggable:false,
				radius:160*i,
				strokeColor:"#FF"+(i*(255/numberOfRings)).toString(16)+"00",
				strokeOpacity:0.8,
				strokeWeight:2,
				fillColor:"#FF"+(i*(255/numberOfRings)).toString(16)+"00",
				fillOpacity:0.4,
				map: map
			});
			google.maps.event.addListener(circle, 'mouseout', function() {removeRadius();});
			radius.push(circle);
		}
	}
	
	function removeRadius(location){
		for(var i = 0;i<radius.length;i++){
			radius[i].setMap(null);
		}
		radius = [];
	}
	
	function randomPoint(bottomLeft, topRight){
		var latDiff = topRight.lat() - bottomLeft.lat();
		var lngDiff = topRight.lng() - bottomLeft.lng();
		var newLat = bottomLeft.lat() + Math.random() * latDiff;
		var newLng = bottomLeft.lng() + Math.random() * lngDiff;
		return new google.maps.LatLng(newLat, newLng);
	}
	
	function placeCarsRandomly(){
		for(var i = 0; i<M; i++){
				var rPoint = randomPoint(new google.maps.LatLng(50.8883491, -1.4981467), new google.maps.LatLng(50.9603811, -1.3106925));
				directionsService.route({
				origin:rPoint,
				destination:new google.maps.LatLng(50.893150, -1.473627),
				travelMode: google.maps.TravelMode.DRIVING
			}, function(result, status) {
				if (status == google.maps.DirectionsStatus.OK) {
					placeCar(new google.maps.LatLng(result.routes[0].legs[0].start_location.lat(), result.routes[0].legs[0].start_location.lng()));
				}else{
					alert("Error: Google Maps API not returning location data. Please refresh the page.");
				}
			});
		}
	}
	
	function distanceToNearestRealJam(location){
		var closestDistance = Infinity;
		for(var i = 0; i<jams.length; i++){
			if(jams[i].real === true){
				var dist = Math.sqrt(Math.pow(location.lat()-jams[i].getCenter().lat(), 2)+Math.pow(location.lng()-jams[i].getCenter().lng(), 2));
				if(dist < closestDistance){
					closestDistance = dist;
				}
			}
		}
		return closestDistance * 110.574;
	}
	google.maps.event.addDomListener(window, 'load', initialize);
    </script>
  </head>
  <body>
    <div id="map-canvas"/>
  </body>
</html>